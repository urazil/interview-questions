# week 2

## 안드로이드 4대 컴포넌트에 대해 설명해보세요.

4대 컴포넌트: 엑티비티(Activity), 서비스(Service), 콘텐트 제공자(Content Provider), 방송수신자(Brodcaster Receiver)로 구성되어있다.
이 구성요소들은 독립된 형태로 존재하며, 각자 고유 기능을 수행하고 Intent로 상호작용 을한다.

 1.엑티비티 : 사용자의 화면을 담당하는 구성요소이다.
 특징: 1) 2개이상의 엑티비티를 동시에 보여줄수없다.
       2) intent를 통해 다른 어플에 엑티비티를 호출 할수있다.
       3) 반드시 앱에는 하나 이상의 엑티비티가 있어야한다.
       4) 하나이상의 뷰 또는 뷰그룹을 포함한다.
       5) 엑티비티 내에는 프래그먼트를 추가하여 화면 분할이 가능하다.

 2. 서비스 : 백그라운드에서 실행하는 프로세서이다. 화면의 보이진 않치만 service class를 상속받아 구현가능하다.
 특징: 1) 따로 UI를 가지지 않으며 백그라운드에서 수행한다.
       2) 어플이 종료되도 시작 된 서비스는 백그라운드에서 계속 작동한다.
       3) 네트워크와 연동가능하다.

 3. 콘텐트 제공자 : 데이터를 관리하고 다른 어플의 데이터를 제공하는 요소이다.
 특징: 1)SQLite 데이터베이스/파일 입출력/ Web등을 통해서 데이터를 관리한다.
        2) 생명주기를 가지고 있지않는다.
        3)콘텐트 제공자를 통하여 다른 어플리케이션의 데이터도 변경할 수 있다.

 4. 방송 수신자: 안드로이드에서 다양한 이벤트와 정보를 받아 반응하는 요소이다.
 특징: 1) 대부분 UI를 가지지 않는다.
       2) 디바이스의 네트워크 연결해제나 위치 정보 사용해제등을 대처하기 위해 사용된다.


## 안드로이드 생명주기에 대해 설명해보세요.

onCreate() : 반드시 구현해야 하는 메서드! Activity가 처음 생성될 때 호출되며 최초로 한 번 실행된다.

onStart() : Activity가 화면으로 보일 때(만들어질 때) 실행되는 메소드

onResume() : 액티비티가 화면 포그라운드에 있고 사용자 포커스를 갖고 있는 경우 (액티비티가 실행중)

onPause() : 다른 액티비티가 포그라운드에 나와있고, 사용자 포커스를 다른 액티비티가 갖고 있지만, 현재 이 액티비티도 여전히 표시되어 있는 경우 (일시정지!)
            다른 액티비티가 위에 표시되어 있고, 일시정지된 액티비티는 부분적으로 투명하거나 전체화면을 덮고있지는 않음.
            완전히 살아있는 상태기때문에 객체가 메모리에 보관되어 있고, 모든 상태 및 멤버 정보를 유지, 창 관리자에게 속해 있다 (단 메모리가 극히 부족한 경우, 시스템이 중단시킬 수 있음)

onStop() : Activity가 화면에 보이지 않을 때(ex. 홈키 누른 경우) 실행되는 메소드

onDestroy() : Activity가 메모리에서 제거될 때(ex. 종료) 실행되는 메소드

최초로 앱을 실행하면 onCreate()가 호출되는데 이때 초기화 관련 작업을 하면 좋다.
다음으로 onStart()가 호출되는데 이 시점부터 사용자가 액티비티를 볼 수 있다.
그리고 액티비티가 실제 사용자와 상호작용이 가능한 포그라운드에 위치하면
onResume()이 호출된다. 이 상태를 액티비티가 실행 중인 것으로 본다.

반대로 액티비티가 실행중인 상태에서 사용자와 상호작용이 불가능한 상태,즉 포커스를 잃은 상태가 되면 onPause()가 호출된다.onStop()은 액티비티가 더 이상 보이지 않을때 호출된다.
그리고 액티비티가 종료되거나 앱 프로세스 자체가 종료되면 onDestroy()가 호출된다.

## Context가 무엇인지 설명해보세요.
Context란 작게는 어플리케이션 자신이 가지고 있는 이미지, 문자열, 레이아웃 같은 리소스 참조를, 크게는 안드로이드 시스템 서비스에 접속하기 위한 관문 역할을 하는 객체다.
Context  는 크게 두 가지 역할을 수행하는 Abstract 클래스이다.

1. 어플리케이션에 관하여 시스템이 관리하고 있는 정보에 접근하기
2. 안드로이드 시스템 서비스에서 제공하는 API 를 호출 할 수 있는 기능

//잘 이해가 안됨...







## 안드로이드 메니페스트 파일에 대해 설명해보세요.

메니페스트란 안드로이드 시스템이 앱의 코드를 실행하기 전에 확보해야 하는 앱에 대한 필수 정보를 시스템에 제공하는 목록이다.

애플리케이션에 대한 Java 패키지의 이름을 나타냅니다. 패키지 이름이 애플리케이션에 대한 고유한 식별자 역할을 합니다.
애플리케이션의 구성 요소를 설명합니다. 액티비티, 서비스, 브로드캐스트 수신기 및 콘텐츠 제공자 등 애플리케이션을 이루는 여러 항목을 말합니다.
이것은 각 구성 요소를 구현하는 클래스의 이름을 나타내고 각각의 기능을 게시합니다(예를 들어 처리할 수 있는 Intent 메시지 종류 등). 이러한 선언을 통해 Android 시스템이 여러 구성 요소가 각각 무엇인지 알게 되고, 어떤 조건에서 시작해야 하는지 알 수 있습니다.
어느 프로세스가 애플리케이션 구성 요소를 호스팅할 것인지 결정합니다.
API의 보호된 부분에 액세스하여 다른 애플리케이션과 상호 작용하려면 애플리케이션에 어느 권한이 꼭 필요한지 선언합니다.
또한, 이 애플리케이션의 구성 요소와 상호 작용하려면 다른 애플리케이션이 반드시 가지고 있어야 하는 권한도 선언합니다.
이는 애플리케이션이 실행 중일 때 프로파일링과 기타 정보를 제공하는 Instrumentation 클래스를 목록으로 표시합니다.
이러한 선언이 매니페스트에 나타나는 것은 애플리케이션이 개발 중이고 테스트되는 단계에만 국한됩니다. 이들은 애플리케이션이 게시되기 전에 제거됩니다.
이는 애플리케이션이 필요로 하는 Android API의 최소 레벨을 선언합니다.
애플리케이션이 연결되어야 하는 라이브러리를 목록으로 표시합니다.

 메니페스트 구성요소
<manifest>
 어플리케이션에 대한 전반적인 정보들을 포함한다
 xmlns:android는 항상 다음과 같은 네임스페이스를 지정해야한다.
 packpge는 어플리케이션의 패키지 이름을 지정한다.
 android:versionCode는 어플리케이션의 버전코드이다. android:versionName는 어플리케이션 버전이다


  <application>
 어플리케이션의 이름, 아이콘등을 정의한다. android:icon은 어플리케이션의 아이콘을 지정한다. android:label은 어플리케이션의 이름을 지정한다.
 안드로이드 컴포넌트 클래스는(엑티비티,서비스,브로드캐스트 등등) AndroidManifest.xml에 등록해야 하며
  <application>태그의 하위 태그로 등록한다.

  ex) android:icon="@mipmap/ic_launcher", android:label=@string/app_name"
  <application>태그의 속성으로, (앱 아이콘 이미지,앱 이름)을 표시합니다.

  <activity>
  앱의 액티비티 컴포넌트를 등록하기 위한 태그이다.
  android:name은 액티비티의 클래스 이름이다.
  android:label은 화면에 표시될 액티비티의 이름이다



  <intent-filter>
  암시적 인텐트를 통해 사용자로 하여금 어느 앱을 사용할지 선택하도록 하고자 할때 intentfilter가 필요하다.
 즉, 다른 앱에서 본인 앱에 접근하거나, 본인앱에서 다른 앱으로 접근하기위한 필터이다.

 <action>
intentfilter에 작업을 추가합니다.<Intent-filter>는 <action>요소가 없다면 intent를 허용하지않는다.

<meta-data>
임의의 값을 저장하여 사용하는 태그.
<meta-data>태그는 <application>,<activity>,<service>등에 포함하여 사용할 수 있다.



